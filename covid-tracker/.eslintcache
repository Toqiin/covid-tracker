[{"C:\\Users\\tmitc\\Projects\\covid\\covid-tracker\\src\\index.js":"1","C:\\Users\\tmitc\\Projects\\covid\\covid-tracker\\src\\App.js":"2","C:\\Users\\tmitc\\Projects\\covid\\covid-tracker\\src\\reportWebVitals.js":"3","C:\\Users\\tmitc\\Projects\\covid\\covid-tracker\\src\\InfoBox.js":"4","C:\\Users\\tmitc\\Projects\\covid\\covid-tracker\\src\\Map.js":"5","C:\\Users\\tmitc\\Projects\\covid\\covid-tracker\\src\\Table.js":"6","C:\\Users\\tmitc\\Projects\\covid\\covid-tracker\\src\\util.js":"7","C:\\Users\\tmitc\\Projects\\covid\\covid-tracker\\src\\LineGraph.js":"8","C:\\Users\\tmitc\\Projects\\covid\\covid-tracker\\src\\states.js":"9","C:\\Users\\tmitc\\Projects\\covid\\covid-tracker\\src\\USTimelineMap.js":"10"},{"size":500,"mtime":1609796559740,"results":"11","hashOfConfig":"12"},{"size":9094,"mtime":1609975473186,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":499162500000,"results":"14","hashOfConfig":"12"},{"size":817,"mtime":1609796573151,"results":"15","hashOfConfig":"12"},{"size":1071,"mtime":1609971960407,"results":"16","hashOfConfig":"12"},{"size":373,"mtime":1609796571955,"results":"17","hashOfConfig":"12"},{"size":7897,"mtime":1609971428149,"results":"18","hashOfConfig":"12"},{"size":4917,"mtime":1609630113570,"results":"19","hashOfConfig":"12"},{"size":5363,"mtime":1609805610570,"results":"20","hashOfConfig":"12"},{"size":846,"mtime":1609972614754,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"bi028v",{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"C:\\Users\\tmitc\\Projects\\covid\\covid-tracker\\src\\index.js",[],["44","45"],"C:\\Users\\tmitc\\Projects\\covid\\covid-tracker\\src\\App.js",["46"],"C:\\Users\\tmitc\\Projects\\covid\\covid-tracker\\src\\reportWebVitals.js",[],"C:\\Users\\tmitc\\Projects\\covid\\covid-tracker\\src\\InfoBox.js",[],"C:\\Users\\tmitc\\Projects\\covid\\covid-tracker\\src\\Map.js",[],"C:\\Users\\tmitc\\Projects\\covid\\covid-tracker\\src\\Table.js",[],"C:\\Users\\tmitc\\Projects\\covid\\covid-tracker\\src\\util.js",["47","48"],"import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\nimport { statesPos } from './states';\r\n\r\nconst casesTypeColors = {\r\n    cases: {\r\n        hex: \"#CC1034\",\r\n        rgb: \"rgb(204, 16, 52)\",\r\n        half_op: \"rgba(204, 16, 52, 0.5)\",\r\n        multiplier: 400,\r\n        stateMultiplier: 200\r\n    },\r\n    recovered: {\r\n        hex: \"#7dd71d\",\r\n        rgb: \"rgb(125, 215, 29)\",\r\n        half_op: \"rgba(125, 215, 29, 0.5)\",\r\n        multiplier: 600,\r\n        stateMultiplier: 300\r\n    },\r\n    deaths: {\r\n        hex: \"#fb4443\",\r\n        rgb: \"rgb(251, 68, 67)\",\r\n        half_op: \"rgba(251, 68, 67, 0.5)\",\r\n        multiplier: 1000,\r\n        stateMultiplier: 500\r\n    },\r\n};\r\n\r\nexport const sortData = (data) => {\r\n    const sortedData = [...data];\r\n    sortedData.sort((a, b) => {\r\n        if (a.cases > b.cases) {\r\n            return -1;\r\n        } else {\r\n            return 1;\r\n        }\r\n    })\r\n    return sortedData;\r\n}\r\n\r\nexport const toTitleCase = (str) => {\r\n    return str.replace(\r\n        /\\w\\S*/g,\r\n        function (txt) {\r\n            return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\r\n        }\r\n    );\r\n}\r\n\r\nexport const showDataOnMap = (states, data, onCircleClick, USFocus, casesType = \"cases\") => {\r\n    let countryCircles = data.map(function (country) {\r\n        if (USFocus) {\r\n            if (country.country !== 'USA') {\r\n                return (\r\n                    <Circle\r\n                        center={[country.countryInfo.lat, country.countryInfo.long]}\r\n                        color={casesTypeColors[casesType].hex}\r\n                        fillColor={casesTypeColors[casesType].hex}\r\n                        fillOpacity={0.4}\r\n                        radius={\r\n                            Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n                        }\r\n                        eventHandlers={{\r\n                            click: () => {\r\n                                onCircleClick(country);\r\n                            },\r\n                            mouseover: (e) => {\r\n                                e.target.openPopup();\r\n                            },\r\n                            mouseout: (e) => {\r\n                                e.target.closePopup();\r\n                            }\r\n                        }}\r\n                    >\r\n                        <Popup>\r\n                            <div className=\"info-container\">\r\n                                <div\r\n                                    className=\"info-flag\"\r\n                                    style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n                                ></div>\r\n                                <div className=\"info-name\">{country.country}</div>\r\n                                <div className=\"info-confirmed\">\r\n                                    Cases: {numeral(country.cases).format(\"0,0\")}\r\n                                </div>\r\n                                <div className=\"info-recovered\">\r\n                                    Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n                                </div>\r\n                                <div className=\"info-deaths\">\r\n                                    Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n                                </div>\r\n                            </div>\r\n                        </Popup>\r\n                    </Circle>\r\n                );\r\n            }\r\n        } else {\r\n            return (\r\n                <Circle\r\n                    center={[country.countryInfo.lat, country.countryInfo.long]}\r\n                    color={casesTypeColors[casesType].hex}\r\n                    fillColor={casesTypeColors[casesType].hex}\r\n                    fillOpacity={0.4}\r\n                    radius={\r\n                        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n                    }\r\n                    eventHandlers={{\r\n                        click: () => {\r\n                            onCircleClick(country);\r\n                        },\r\n                        mouseover: (e) => {\r\n                            e.target.openPopup();\r\n                        },\r\n                        mouseout: (e) => {\r\n                            e.target.closePopup();\r\n                        }\r\n                    }}\r\n                >\r\n                    <Popup>\r\n                        <div className=\"info-container\">\r\n                            <div\r\n                                className=\"info-flag\"\r\n                                style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n                            ></div>\r\n                            <div className=\"info-name\">{country.country}</div>\r\n                            <div className=\"info-confirmed\">\r\n                                Cases: {numeral(country.cases).format(\"0,0\")}\r\n                            </div>\r\n                            <div className=\"info-recovered\">\r\n                                Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n                            </div>\r\n                            <div className=\"info-deaths\">\r\n                                Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n                            </div>\r\n                        </div>\r\n                    </Popup>\r\n                </Circle>\r\n            );\r\n        }\r\n\r\n    });\r\n\r\n    let stateCircles = [];\r\n    if (USFocus) {\r\n        stateCircles = states.map(function (state) {\r\n            let stateCenter = [];\r\n            for (let i = 0; i < statesPos.length; i++) {\r\n                if (statesPos[i].state === state.state) {\r\n                    stateCenter = [statesPos[i].latitude, statesPos[i].longitude];\r\n                }\r\n            }\r\n\r\n            if (stateCenter.length > 0) {\r\n                return (\r\n                    <Circle\r\n                        center={stateCenter}\r\n                        color={casesTypeColors[casesType].hex}\r\n                        fillColor={casesTypeColors[casesType].hex}\r\n                        fillOpacity={0.4}\r\n                        radius={\r\n                            Math.sqrt(state[casesType]) * casesTypeColors[casesType].stateMultiplier\r\n                        }\r\n                        eventHandlers={{\r\n                            mouseover: (e) => {\r\n                                e.target.openPopup();\r\n                            },\r\n                            mouseout: (e) => {\r\n                                e.target.closePopup();\r\n                            }\r\n                        }}\r\n                    >\r\n                        <Popup>\r\n                            <div className=\"info-container\">\r\n                                <div\r\n                                    className=\"info-flag\"\r\n                                    // style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n                                ></div>\r\n                                <div className=\"info-name\">{state.state}</div>\r\n                                <div className=\"info-confirmed\">\r\n                                    Cases: {numeral(state.cases).format(\"0,0\")}\r\n                                </div>\r\n                                <div className=\"info-recovered\">\r\n                                    Recovered: {numeral(state.recovered).format(\"0,0\")}\r\n                                </div>\r\n                                <div className=\"info-deaths\">\r\n                                    Deaths: {numeral(state.deaths).format(\"0,0\")}\r\n                                </div>\r\n                            </div>\r\n                        </Popup>\r\n                    </Circle>\r\n                );\r\n            }\r\n        });\r\n    }\r\n\r\n    return countryCircles.concat(stateCircles);\r\n};","C:\\Users\\tmitc\\Projects\\covid\\covid-tracker\\src\\LineGraph.js",[],"C:\\Users\\tmitc\\Projects\\covid\\covid-tracker\\src\\states.js",[],"C:\\Users\\tmitc\\Projects\\covid\\covid-tracker\\src\\USTimelineMap.js",[],{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":11,"column":3,"nodeType":"55","messageId":"56","endLine":11,"endColumn":12},{"ruleId":"57","severity":1,"message":"58","line":52,"column":35,"nodeType":"59","messageId":"60","endLine":52,"endColumn":44},{"ruleId":"57","severity":1,"message":"58","line":145,"column":35,"nodeType":"59","messageId":"60","endLine":145,"endColumn":44},"no-native-reassign",["61"],"no-negated-in-lhs",["62"],"no-unused-vars","'Container' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a value to be returned at the end of function.","FunctionExpression","expectedAtEnd","no-global-assign","no-unsafe-negation"]